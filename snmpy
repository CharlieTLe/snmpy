#!/usr/bin/env python2.7

import argparse
import collections
import glob
import importlib
import logging
import os
import snmpy.mibgen
import snmpy.server
import sys
import yaml

def parse_conf(parser):
    try:
        args = parser.parse_args()
        conf = yaml.load(open(args.config_file))

        parser.set_defaults(**(conf['snmpy_global']))

        args = parser.parse_args()
        conf['snmpy_global'].update(vars(args))

        create_log(conf['snmpy_global']['logger_dest'], conf['snmpy_global']['debug'])

        logging.debug('starting system with merged args: %s', args)
    except (IOError, yaml.parser.ParserError, yaml.scanner.ScannerError) as e:
        parser.error('cannot parse configuration file: %s' % e)

    if conf['snmpy_global']['config_path']:
        for item in glob.glob('%s/*.y*ml' % conf['snmpy_global']['config_path']):
            try:
                indx, name = os.path.splitext(os.path.basename(item))[0].split('_', 1)
                if name in conf:
                    raise ValueError('%s: plugin name already assigned at another index', name)
                if int(indx) < 1:
                    raise ValueError('%s: invalid plugin index', indx)
                if int(indx) in list(v['snmpy_index'] for k, v in conf.items() if k != 'snmpy_global'):
                    raise ValueError('%s: index already assigned to another plugin', indx)

                conf[name] = {
                    'name':        name,
                    'time':        0,
                    'snmpy_index': int(indx),
                    'snmpy_extra': dict(args.extra),
                }
                conf[name].update(yaml.load(open(item)) or {})
            except (IOError, yaml.parser.ParserError, yaml.scanner.ScannerError) as e:
                parser.error('cannot parse configuration file: %s' % e)

    return conf


def create_log(dest=None, debug=False):
    logger = logging.getLogger()

    if dest or debug:
        if dest and dest.startswith('syslog:'):
            hdlr = logging.handlers.SysLogHandler(facility=dest.split(':')[-1])
        elif dest and not dest.startswith('console:'):
            hdlr = logging.FileHandler(dest)
        else:
            hdlr = logging.StreamHandler()

        hdlr.setFormatter(logging.Formatter('%(asctime)s.%(msecs)03d - %(filename)16s:%(lineno)-3d %(levelname)8s: %(message)s', '%Y-%m-%d %H:%M:%S'))

        logger.setLevel(logging.DEBUG if debug else logging.INFO)
        logger.addHandler(hdlr)

        logger.info('logging started')
    else:
        logger.addHandler(logging.NullHandler())

    return logger


def initialize(conf):
    logging.info('initialization started')

    plugins = collections.OrderedDict()

    try:
        keys = [i for i in sorted(conf.keys()) if i != 'snmpy_global']
        logging.info('configuring %d plugin(s): %s', len(keys), ', '.join(keys))

        for name in keys:
            logging.debug('%s: creating plugin instance', name)

            base = conf[name]['module']
            full = 'snmpy.plugin.%s' % base
            code = importlib.import_module(full)
            plugins[name] = getattr(code, base)(conf[name])

            logging.debug('%s: created plugin instance of %s (%s)', name, base, plugins[name])
    except Exception as e:
        snmpy.log_fatal(e, 'initialization failed')

    logging.info('initialization complete')
    return plugins


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Modular SNMP AgentX system')
    parser.add_argument('-p', '--parent-root', default='enterprises',
                        help='parent root class name')
    parser.add_argument('-o', '--system-root', type=int, default=1123,
                        help='system root object id')
    parser.add_argument('-f', '--config-file', default='/etc/snmpy.yml',
                        help='system configuration file')
    parser.add_argument('-i', '--include-dir',
                        help='system configuration path')
    parser.add_argument('-s', '--master-sock', default='/var/agentx/master',
                        help='agentx master socket path or host:port')
    parser.add_argument('-l', '--logger-dest', default='console:',
                        help='filename, syslog:<facility>, or console:')
    parser.add_argument('-m', '--create-mib', nargs='?', const=sys.stdout, type=argparse.FileType('w'),
                        help='display generated mib file and exit')
    parser.add_argument('-d', '--debug', default=False, action='store_true',
                        help='enable debug logging')
    parser.add_argument('-e', '--extra', default=[], action='append', nargs=2,
                        help='extra key/val pairs for plugins')
    conf = parse_conf(parser)
    mods = initialize(conf)

    if conf['snmpy_global']['create_mib']:
        conf['snmpy_global']['create_mib'].write(snmpy.mibgen.create_mib(conf, mods))
    else:
        snmpy.server.SnmpyAgent(conf, mods)

# vim: sw=4 ts=4 sts=4 sta si et nu ruler cinwords=if,elif,else,for,while,try,except,finally,def,class
